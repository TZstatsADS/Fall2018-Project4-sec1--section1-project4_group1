grepl("^[[:lower:]]+$", "drveR")
grepl('^[[:lower:]]+$', substr("aEEb", 1, 1)) & grepl('^[[:lower:]]+$', substr("aEEb", nchar("aEEb"), nchar("aEEb"))) & grepl('^[[:upper:]]+$', substr("aEEb", 2, nchar("aEEb")-1))
grepl('^[[:lower:]]+$', substr("aEeb", 1, 1)) & grepl('^[[:lower:]]+$', substr("aEeb", nchar("aEeb"), nchar("aEeb"))) & grepl('^[[:upper:]]+$', substr("aEeb", 2, nchar("aEeb")-1))
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
grepl('^[[:upper:]]', "aeIxx")
grepl('^[[:upper:]]+', "aeIxx")
grepl('^[[:upper:]]+$', "aeIxx")
unlist(gregexpr("[A-Z]", "aeIxx"))
unlist(gregexpr("[A-Z]", "aexxx"))
substr("Driver", 2, nchar("Driver")-1)
grepl('^[[:lower:]]+$', substr("abEc", 1, 1)) & grepl('^[[:lower:]]+$', substr("abEc", nchar("abEc"), nchar("abEc"))) & (unlist(gregexpr('[A-Z]', substr("abEc", 2, nchar("abEc")-1))) > 0)
grepl('^[[:lower:]]+$', substr("abEC", 1, 1)) & grepl('^[[:lower:]]+$', substr("abEC", nchar("abEC"), nchar("abEC"))) & (unlist(gregexpr('[A-Z]', substr("abEC", 2, nchar("abEC")-1))) > 0)
grepl('^[[:lower:]]+$', substr("ac", 1, 1)) & grepl('^[[:lower:]]+$', substr("ac", nchar("ac"), nchar("ac"))) & (unlist(gregexpr('[A-Z]', substr("ac", 2, nchar("ac")-1))) > 0)
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
tesseract_vec
grepl('^[[:lower:]]+$', substr("a", 1, 1)) & grepl('^[[:lower:]]+$', substr("a", nchar("a"), nchar("a"))) & (unlist(gregexpr('[A-Z]', substr("a", 2, nchar("a")-1))) > 0)
sum(tesseract_if_clean == F)
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
tesseract_vec[1]
tesseract_vec[2]
tesseract_vec[3]
grepl('^[[:lower:]]+$', substr(":1", 1, 1)) & grepl('^[[:lower:]]+$', substr(":1", nchar(":1"), nchar(":1"))) & (unlist(gregexpr('[A-Z]', substr(":1", 2, nchar(":1")-1))) > 0)
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
unlist(gregexpr('[A-Z]', substr(";1", 2, nchar(";1")-1)))
unlist(gregexpr('[A-Z]', substr("", 2, nchar("")-1)))
grep('[A-Z]', "atta")
grep('[A-Z]', "atta") == 0
grep('[A-Z]', "attaA")
grep('[A-Z]', "attaABC")
length(grep('[A-Z]', substr("Driver", 2, nchar("Driver")-1))) == 1
length(grep('[A-Z]', substr("DDriver", 2, nchar("DDriver")-1))) == 1
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
# Each person with 2 mins record and fft using 1 second
hert <- get_hertz(dataFiles[[1]][1:(120*33),])
#setwd("~/Documents/GitHub/Tremor-Data-Analysis/lib")
source("../lib/hertz_dataframe_tools.R")
setwd("~/Documents/GitHub/Tremor-Data-Analysis/data/FIRSTHAND")
dataFiles <- lapply(Sys.glob("20180708*.csv"), read.csv)
# Each person with 2 mins record and fft using 1 second
hert <- get_hertz(dataFiles[[1]][1:(120*33),])
hert
dt_bind <- dataFiles[[1]]
for (i in 2:12) {
dt_bind <- abind(dt_bind,dataFiles[[i]],along = 1)
}
nrow(dt_bind)
1342291/(120*33)
# extract 9 varables we interested in
dt_new <- dt_bind[,7:15]
mat <- array(NA,dim = c(338,18))
for (i in 0:337) {
dt = dt_new[(120*33*i+1):(120*33*(i+1)),]
for (j in 1:9) {
fft = get_fft_freq_amp(dt[,j],1,hert)
mat[i+1,c(2*j-1,2*j)] = get_amp_freq(fft)
}
}
View(mat)
sum(mat == -Inf)
# remove the row with -Inf
mat <- mat[-246,]
# transfer mat to dataframe
train_firsthand <- as.data.frame(mat)
colnames(train_firsthand) = c("ampRotation_x","freqRotation_x","ampRotation_y","freqRotation_y","ampRotation_z","freqRotation_z","ampGravity_x","freqGravity_x","ampGravity_y","freqGravity_y","ampGravity_z","freqGravity_z","ampAcceleration_x","freqAcceleration_x","ampAcceleration_y","freqAcceleration_y","ampAcceleration_z","freqAcceleration_z")
train_firsthand$label <- 0
View(train_firsthand)
########################################
############# Random Forest ########
########################################
library(caret)
load("../data/train_set/train.RData")
load("../data/train_set/train.RData")
setwd("~/Documents/GitHub/Tremor-Data-Analysis/data/train_set")
load("../data/train_set/train.RData")
setwd("~/Documents/GitHub/Tremor-Data-Analysis/data")
load("../data/train_set/train.RData")
dt_train <- as.data.frame(dt_train)
dt_train$label <- as.factor(dt_train$label)
hand_rf <- randomForest(label ~ ., data = dt_train, ntree=100, mtry = 5)
hand_rf
263+44
108+92
plot(hand_rf)
### Rank Variable Importance
varImpPlot(hand_rf,
sort = T,
n.var=18,
main="Top 18 - Variable Importance")
### Rank Variable Importance
varImpPlot(hand_rf,
sort = T,
n.var=10,
main="Top 18 - Variable Importance")
load("../data/test_set/test.RData")
dt_test <- as.data.frame(dt_test)
dt_test$label <- as.factor(dt_test$label)
hand_pred <- predict(hand_rf,newdata = dt_test)
hand_pred
confusionMatrix(data = hand_pred, reference = dt_test$label)
hand_rf <- randomForest(label ~ ., data = dt_train, ntree=1000, mtry = 5)
plot(hand_rf)
rm(list = ls())
source('../lib/ifCleanToken.R')
View(ifCleanToken)
### only process one of the files in the folder as an example, in your project, you need to use all the files
current_file_name <- sub(".txt","",file_name_vec[5])
file_name_vec <- list.files("../data/ground_truth") #100 files in total
length(file_name_vec)
file_name_vec
### only process one of the files in the folder as an example, in your project, you need to use all the files
current_file_name <- sub(".txt","",file_name_vec[5])
length(current_file_name)
file_name_vec[5]
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
current_ground_truth_txt[2]
current_ground_truth_txt[179]
current_ground_truth_txt[171]
mode(current_ground_truth_txt)
current_ground_truth_txt[165:]
current_ground_truth_txt[c(165:)]
current_ground_truth_txt[c(165:171)]
current_file_name
current_ground_truth_txt[c(1:10)]
clean_tesseract_txt <- paste(current_tesseract_txt, collapse = " ")
length(clean_tesseract_txt)
nchar(clean_tesseract_txt)
## detect tesseract word error
tesseract_vec <- str_split(clean_tesseract_txt," ")[[1]] #1124 tokens
?str_split
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
mode(tesseract_if_clean)
head(tesseract_if_clean)
sum(tesseract_if_clean == F)
tesseract_vec[1:5]
tesseract_delete_error_vec <- tesseract_vec[tesseract_if_clean] #1095
length(tesseract_delete_error_vec)
ground_truth_vec <- str_split(paste(current_ground_truth_txt, collapse = " ")," ")[[1]] #1078
length(ground_truth_vec)
?vecsets::vintersect
old_intersect_vec <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_vec)) #607
length(old_intersect_vec)
tesseract_vec
999+124
length(tesseract_vec)
length(tesseract_delete_error_vec)
new_intersect_vec <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_delete_error_vec)) #600
length(new_intersect_vec)
OCR_performance_table <- data.frame("Tesseract" = rep(NA,4),
"Tesseract_with_postprocessing" = rep(NA,4))
OCR_performance_table
row.names(OCR_performance_table) <- c("word_wise_recall","word_wise_precision",
"character_wise_recall","character_wise_precision")
OCR_performance_table
OCR_performance_table
OCR_performance_table["word_wise_recall","Tesseract"] <- length(old_intersect_vec)/length(ground_truth_vec)
OCR_performance_table["word_wise_precision","Tesseract"] <- length(old_intersect_vec)/length(tesseract_vec)
OCR_performance_table["word_wise_recall","Tesseract_with_postprocessing"] <- length(new_intersect_vec)/length(ground_truth_vec)
OCR_performance_table["word_wise_precision","Tesseract_with_postprocessing"] <- length(new_intersect_vec)/length(tesseract_delete_error_vec)
kable(OCR_performance_table, caption="Summary of OCR performance")
length(ground_truth_vec)
length(tesseract_vec)
length(old_intersect_vec)
kable(OCR_performance_table, caption="Summary of OCR performance")
length(clean_tesseract_txt)
clean_tesseract_txt
tesseract_vec[1:5]
ground_truth_vec[1:5]
length(tesseract_vec)
length(ground_truth_vec)
nchar
nchar(current_ground_truth_txt)
current_ground_truth_txt[1:5]
length(current_tesseract_txt)
current_tesseract_txt[1:5]
length(current_tesseract_txt[1:5])
aa = as.character(current_ground_truth_txt)
length(aa)
aa[1;5]
aa[1:5]
aa
aa = "He served as EAC"
aa
aa[1]
unlist
unlist(strsplit(aa,NULL)[[1]])
unlist(strsplit(aa,letters))
unlist(strsplit(aa,""))
unlist(strsplit("Universal Oil Products and a 10-year",""))
unlist(aa)
unlist(aa,"")
length(clean_tesseract_txt)
nchar(clean_tesseract_txt)
clean_tesseract_txt[7193]
clean_tesseract_txt[7192]
clean_tesseract_txt
clean_tesseract_txt[c(1)]
clean_tesseract_txt[[1]]
current_tesseract_txt
bb
aa
current_tesseract_txt
current_ground_truth_txt
clean_tesseract_txt
bb = unlist(str_split(current_tesseract_txt,""))
length(bb)
bb
cc = tolower(bb)
cc
length(cc)
letters
which(letters) == f
which(letters) == "f"
length(letters)
letters[5]
mode(letters)
mode("f")
letters == "f"
which(letters == "f") == T
which(letters == "f")
which(letters == "9")
which(letters == "f") + which(letters == "9")
which(letters == "f") + which(letters == "e")
mat <= matrix(0,nrow = 26,ncol = 26)
mat <= matrix(rep(0,26*26),nrow = 26,ncol = 26)
matrix(0,nrow = 2,ncol = 2)
mat = matrix(0,nrow = 2,ncol = 2)
mat = matrix(0,nrow = 26,ncol = 26)
mat
which(letters == aa[1])
which(letters == aa[2])
aa
bb
which(letters == bb[2])
text()
}
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:length(string)) {
j = which(letters == string[i])
k = which(letters == string[i+1])
if(j+k > 0){mat[j,k] = mat[j,k] + 1}
}
}
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:length(string)) {
j = which(letters == string[i])
k = which(letters == string[i+1])
if(j+k > 0){mat[j,k] = mat[j,k] + 1}
}
return(mat)
}
mat <- insertion_method(aa)
tolower(unlist(str_split(a,"")))
tolower(unlist(str_split(aa,"")))
insertion_method(aa)
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:length(string)) {
j = which(letters == string[i])
k = which(letters == string[i+1])
ifelse(j+k > 0,mat[j,k] + 1,mat[j,k])
}
return(mat)
}
insertion_method(aa)
mat[1,2] + 3
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:length(string)) {
j = which(letters == string[i])
k = which(letters == string[i+1])
ifelse(j+k > 0,mat[j,k],mat[j,k]+1)
}
return(mat)
}
insertion_method(aa)
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:length(string)) {
j = which(letters == string[i])
k = which(letters == string[i+1])
if (j + k > 0){
mat[j,k] <- mat[j,k] + 1
}
}
return(mat)
}
insertion_method(aa)
aa
string <- aa
string = tolower(unlist(str_split(string,"")))
string
mat = matrix(0,nrow = 26,ncol = 26)
i = 1
j = which(letters == string[i])
k = which(letters == string[i+1])
if (j + k > 0){
mat[j,k] <- mat[j,k] + 1
}
i = 1
i = 2
j = which(letters == string[i])
k = which(letters == string[i+1])
if (j + k > 0){
mat[j,k] <- mat[j,k] + 1
}
j
k
class(k)
any(letters == string[i])
any(letters == string[i+1])
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:length(string)) {
if(any(letters == string[i]) & any(letters == string[i+1])){
j <- which(letters == string[i])
k <- which(letters == string[i + 1])
mat[j,k] <- mat[j,k] + 1
}
}
return(mat)
}
insertion_method(aa)
for (i in 1:(length(string) - 1)) {
if(any(letters == string[i]) & any(letters == string[i+1])){
j <- which(letters == string[i])
k <- which(letters == string[i + 1])
mat[j,k] <- mat[j,k] + 1
}
}
insertion_method(aa)
insertion_method <- function(string){
string = tolower(unlist(str_split(string,"")))
mat = matrix(0,nrow = 26,ncol = 26)
for (i in 1:(length(string) - 1)) {
if(any(letters == string[i]) & any(letters == string[i+1])){
j <- which(letters == string[i])
k <- which(letters == string[i + 1])
mat[j,k] <- mat[j,k] + 1
}
}
return(mat)
}
insertion_method(aa)
aa
bb
insertion_method(bb)
ground_text <- list(NA)
file_name_vec
length(file_name_vec)
current_file_name
ground_text <- list(NA)
for (i in 1:length(file_name_vec)) {
ground_text[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],".txt",sep=""), warn=FALSE)
}
for (i in 1:length(file_name_vec)) {
ground_text[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
setwd("~/Documents/GitHub/Fall2018-Project4-sec1--section1-project4_group1/data")
for (i in 1:length(file_name_vec)) {
ground_text[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
ground_text[[1]]
string = tolower(unlist(str_split(ground_text,"")))
string = tolower(unlist(str_split(unlist(ground_text),"")))
length(string)
string
mat <- insertion_method(string)
mat
?save
save(mat, file="../output/denominator.RData")
load("../output/denominator.RData")
rm(list = ls())
load("../output/denominator.RData")
View(mat)
##### Save 100 files denominator matrix
source("../lib/denominator.R")
##### Save 100 files denominator matrix
source("../lib/denominator.R")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
unlist(ground_text)
ground_text <- list(NA)
for (i in 1:length(file_name_vec)) {
ground_text[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
unlist(ground_text)
##### Load 100 files and return tesseract_if_clean
tesseract_vec_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
tesseract_vec_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
tesseract_vec_100 <- unlist(tesseract_vec_100)
length(tesseract_vec_100)
tesseract_if_clean_100 <- unlist(lapply(tesseract_vec_100,ifCleanToken))
source('../lib/ifCleanToken.R')
tesseract_if_clean_100 <- unlist(lapply(tesseract_vec_100,ifCleanToken))
tesseract_vec[10]
source('../lib/ifCleanToken.R')
tesseract_if_clean_100 <- unlist(lapply(tesseract_vec_100,ifCleanToken))
length(tesseract_if_clean_100)
##### Load 100 files and return tesseract_if_clean
tesseract_vec_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
tesseract_vec_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
tesseract_vec_100 <- str_split(unlist(tesseract_vec_100),"")[[1]]
length(tesseract_vec_100)
tesseract_vec_100
##### Load 100 files and return tesseract_if_clean
tesseract_vec_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
tesseract_vec_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
tesseract_vec_100
length(tesseract_vec_100)
tesseract_vec_100 <- str_split(tesseract_vec_100,"")[[1]]
tesseract_vec_100
##### Load 100 files and return tesseract_if_clean
tesseract_vec_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
tesseract_vec_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
}
tesseract_vec_100_clean <- str_split(tesseract_vec_100,"")[[1]]
unlist(tesseract_vec_100)
### only process one of the files in the folder as an example, in your project, you need to use all the files
current_file_name <- sub(".txt","",file_name_vec[5])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
clean_tesseract_txt <- paste(current_tesseract_txt, collapse = " ") #7193 nchar
clean_tesseract_txt
tesseract_vec
## detect tesseract word error
tesseract_vec <- str_split(clean_tesseract_txt," ")[[1]] #1124 tokens
tesseract_vec
tesseract_vec_100[[1]]
current_tesseract_txt
tesseract_vec_100_clean <- c(NA)
tesseract_vec_100_clean <- list(NA)
##### Load 100 files and return tesseract_if_clean
current_tesseract_txt_100 <- list(NA)
clean_tesseract_txt_100 <- list(NA)
##### Load 100 files and return tesseract_if_clean
current_tesseract_txt_100 <- list(NA)
clean_tesseract_txt_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
current_tesseract_txt_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
clean_tesseract_txt_100[i] = paste(current_tesseract_txt_100[i], collapse = " ")
}
##### Load 100 files and return tesseract_if_clean
current_tesseract_txt_100 <- list(NA)
clean_tesseract_txt_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
current_tesseract_txt_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
clean_tesseract_txt_100[[i]] = paste(current_tesseract_txt_100[[i]], collapse = " ")
}
clean_tesseract_txt_100[[1]]
current_tesseract_txt_100[[1]]
clean_tesseract_txt
tesseract_vec_100 <- str_split(unlist(clean_tesseract_txt_100),"")[[1]]
length(tesseract_vec_100)
tesseract_vec_100
tesseract_vec
clean_tesseract_txt
tesseract_vec
tesseract_vec_100 <- str_split(unlist(clean_tesseract_txt_100)," ")[[1]]
tesseract_vec_100
tesseract_vec
length(tesseract_vec)
tesseract_if_clean
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
tesseract_if_clean
length(tesseract_if_clean)
tesseract_vec
tesseract_vec_100
length(tesseract_vec_100)
clean_tesseract_txt_100
unlist(clean_tesseract_txt_100)
tesseract_vec_100
tesseract_vec_100[1100]
tesseract_vec_100[1100:]
length(tesseract_vec_100)
tesseract_vec_100[1700:1756]
unlist(unlist(clean_tesseract_txt_100))
as.vector(unlist(clean_tesseract_txt_100))
length(unlist(clean_tesseract_txt_100))
mode(unlist(clean_tesseract_txt_100))
file_name_vec
